wdbc_tab <- table(wdbc$V2, wdbc_kmeans$cluster)
library(stats)#
library(cluster)#
library(fields)#
#
source('~/Dropbox/Tarleton/data_mining/generic_functions/dataset_ops.R')#
wdbc <- read.csv('~/Dropbox/Tarleton/data_mining/dfiles/wdbc.data',#
                 header=F,sep=',')#
wdbc <- wdbc[,-1]#
nr <- nrow(wdbc) #
nc <- ncol(wdbc)
wdbc_kmeans <- kmeans_reps(wdbc[2:nc], 2, 1000)#
wdbc_tab <- table(wdbc$V2, wdbc_kmeans$cluster)
wdbc_tab
predicted <- rep('',nr)#
predicted[1 * (wdbc_kmeans$cluster == 2) == 1] <- 'B'#
predicted[1 * (wdbc_kmeans$cluster == 1) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)
wdbc_tab
chisq.test(wbdc_tab, simulate.p.value = T)#
chisq.test(wbdc_tab, simulate.p.value = F)
chisq.test(wdbc_tab, simulate.p.value = T)#
chisq.test(wdbc_tab, simulate.p.value = F)
z <- standardize(wdbc, 2:nc)
k = 5#
z <- standardize(wdbc, 2:nc)#
dmat <- rdist(z)#
#
sort_dmat <- apply(dmat, 2, sort)#
kdist <- sort_dmat[k,]#
plot(sort(kdist), type='l', #
     xlab = 'Points Sorted by k-dist', #
     ylab = 'k-dist')#
lines(1:length(kdist), rep(0.79, length(kdist)), col = 'green')
k = 5#
z <- standardize(wdbc, 2:nc)#
dmat <- rdist(z[,2:nc])#
#
sort_dmat <- apply(dmat, 2, sort)#
kdist <- sort_dmat[k,]#
plot(sort(kdist), type='l', #
     xlab = 'Points Sorted by k-dist', #
     ylab = 'k-dist')#
lines(1:length(kdist), rep(0.79, length(kdist)), col = 'green')
z <- standardize(iris, 1:ncol(iris) - 1)
dmat <- rdist(z)
sortdmat <- apply(dmat, 2, sort)
kdist = sortdmat[k,]
plot(sort(kdist), type='l')
lines(1:length(kdist), rep(0.79, length(kdist)))
k = 5#
z <- standardize(wdbc, 2:nc)#
dmat <- rdist(z[,2:nc])#
#
sort_dmat <- apply(dmat, 2, sort)#
kdist <- sort_dmat[k,]#
plot(sort(kdist), type='l', #
     xlab = 'Points Sorted by k-dist', #
     ylab = 'k-dist')
lines(1:length(kdist), rep(4, length(kdist)), col='green')
lines(1:length(kdist), rep(4.4, length(kdist)), col='green')
lines(1:length(kdist), rep(4.3, length(kdist)), col='green')
lines(1:length(kdist), rep(4.35, length(kdist)), col='blue')
lines(1:length(kdist), rep(4.3, length(kdist)), col='blue')
plot(sort(kdist), type='l', #
     xlab = 'Points Sorted by k-dist', #
     ylab = 'k-dist')#
lines(1:length(kdist), rep(4.35, length(kdist)), col='blue')
plot(sort(kdist), type='l', #
     xlab = 'Points Sorted by k-dist', #
     ylab = 'k-dist')#
lines(1:length(kdist), rep(4.3, length(kdist)), col='blue')
plot(sort(kdist), type='l', #
     xlab = 'Points Sorted by k-dist', #
     ylab = 'k-dist')#
lines(1:length(kdist), rep(4.35, length(kdist)), col='blue')
myEps = 4.35
wdbc_dbscan <- dbscan(z[,2:nc], eps = myEps, minPts = k)
library(fpc)
wdbc_dbscan <- dbscan(z[,2:nc], eps = myEps, minPts = k)
wdbc_dbscan <- dbscan(z[,2:nc], eps = myEps, MinPts = k)
plot(z[,2:3], col = (wdbc_dbscan$cluster + 1))#
table(wdbc_dbscan$cluster)
plot(z[,3:4], col = (wdbc_dbscan$cluster + 1))#
table(wdbc_dbscan$cluster)
plot(z[,3], z[,5], col = (wdbc_dbscan$cluster + 1))
table(wdbc_dbscan$cluster)
plot(z[,3], z[,8], col = (wdbc_dbscan$cluster + 1))#
table(wdbc_dbscan$cluster)
plot(z[,2], z[,8], col = (wdbc_dbscan$cluster + 1))#
table(wdbc_dbscan$cluster)
plot(z[,2], z[,8], col = (wdbc_dbscan$cluster + 1))#
#
predicted <- rep('',nr)#
predicted[1 * (wdbc_dbscan$cluster == 2) == 1] <- 'B'#
predicted[1 * (wdbc_dbscan$cluster == 1) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)
wdbc_tab
predicted <- rep('',nr)#
predicted[1 * (wdbc_dbscan$cluster == 1) == 1] <- 'B'#
predicted[1 * (wdbc_dbscan$cluster == 0) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)
wdbc_tab
wdbc_dbscan
attributes(wdbc_dbscan)
#Data Mining hw 19#
library(stats)#
library(cluster)#
library(fields)#
library(fpc)#
#
source('~/Dropbox/Tarleton/data_mining/generic_functions/dataset_ops.R')#
wdbc <- read.csv('~/Dropbox/Tarleton/data_mining/dfiles/wdbc.data',#
                 header=F,sep=',')#
wdbc <- wdbc[,-1]#
nr <- nrow(wdbc) #
nc <- ncol(wdbc) #
#
# 1 Test whether the k-means clusters for the wdbc data set are #
#   statisticaly independent of Diagnosis using a chi-square test with #
#   a simulated p-value.#
#
wdbc_kmeans <- kmeans_reps(wdbc[2:nc], 2, 1000)#
predicted <- rep('',nr)#
predicted[1 * (wdbc_kmeans$cluster == 2) == 1] <- 'B'#
predicted[1 * (wdbc_kmeans$cluster == 1) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)#
#
chisq.test(wdbc_tab, simulate.p.value = T)#
chisq.test(wdbc_tab, simulate.p.value = F)#
#
# 2 In this problem, you will apply the DBSCAN clustering method on the #
#   wdbc data. #
#
#  a. Create a plot of sorted k-dist values, where k = 5, and determine #
#     the optimal vlaue of Eps. #
#
k = 5#
z <- standardize(wdbc, 2:nc)#
dmat <- rdist(z[,2:nc])#
#
sort_dmat <- apply(dmat, 2, sort)#
kdist <- sort_dmat[k,]#
plot(sort(kdist), type='l', #
     xlab = 'Points Sorted by k-dist', #
     ylab = 'k-dist')#
lines(1:length(kdist), rep(4.35, length(kdist)), col='blue')#
#
myEps = 4.35#
#
#  b. Perform DBSCAN using this value of Eps and k = 5#
#
wdbc_dbscan <- dbscan(z[,2:nc], eps = myEps, MinPts = k)#
plot(z[,2], z[,8], col = (wdbc_dbscan$cluster + 1))#
#
predicted <- rep('',nr)#
predicted[1 * (wdbc_dbscan$cluster == 1) == 1] <- 'B'#
predicted[1 * (wdbc_dbscan$cluster == 0) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)#
#
#  c. How many clusters were identified? #
#
#     2#
#
#  d. What percentage of the points in the data were classified as noise? #
#  e. Test whether the dbscan clusters are statistically independent of #
#     Diagnosis using a chi-square test with a simulated p-value. #
#
chisq.test(wdbc_tab, simulate.p.value=T)
#Data Mining hw 19#
library(stats)#
library(cluster)#
library(fields)#
library(fpc)#
#
source('~/Dropbox/Tarleton/data_mining/generic_functions/dataset_ops.R')#
wdbc <- read.csv('~/Dropbox/Tarleton/data_mining/dfiles/wdbc.data',#
                 header=F,sep=',')#
wdbc <- wdbc[,-1]#
nr <- nrow(wdbc) #
nc <- ncol(wdbc) #
#
# 1 Test whether the k-means clusters for the wdbc data set are #
#   statisticaly independent of Diagnosis using a chi-square test with #
#   a simulated p-value.#
#
wdbc_kmeans <- kmeans_reps(wdbc[2:nc], 2, 1000)#
predicted <- rep('',nr)#
predicted[1 * (wdbc_kmeans$cluster == 2) == 1] <- 'B'#
predicted[1 * (wdbc_kmeans$cluster == 1) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)#
#
chisq.test(wdbc_tab, simulate.p.value = T)#
chisq.test(wdbc_tab, simulate.p.value = F)#
#
# 2 In this problem, you will apply the DBSCAN clustering method on the #
#   wdbc data. #
#
#  a. Create a plot of sorted k-dist values, where k = 5, and determine #
#     the optimal vlaue of Eps. #
#
k = 5#
z <- standardize(wdbc, 2:nc)#
dmat <- rdist(z[,2:nc])#
#
sort_dmat <- apply(dmat, 2, sort)#
kdist <- sort_dmat[k,]#
plot(sort(kdist), type='l', #
     xlab = 'Points Sorted by k-dist', #
     ylab = 'k-dist')#
lines(1:length(kdist), rep(3.85, length(kdist)), col='blue')#
#
myEps = 4.35#
#
#  b. Perform DBSCAN using this value of Eps and k = 5#
#
wdbc_dbscan <- dbscan(z[,2:nc], eps = myEps, MinPts = k)#
plot(z[,2], z[,8], col = (wdbc_dbscan$cluster + 1))#
#
predicted <- rep('',nr)#
predicted[1 * (wdbc_dbscan$cluster == 1) == 1] <- 'B'#
predicted[1 * (wdbc_dbscan$cluster == 0) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)#
#
#  c. How many clusters were identified? #
#
#     2#
#
#  d. What percentage of the points in the data were classified as noise? #
#  e. Test whether the dbscan clusters are statistically independent of #
#     Diagnosis using a chi-square test with a simulated p-value. #
#
chisq.test(wdbc_tab, simulate.p.value=T)
#Data Mining hw 19#
library(stats)#
library(cluster)#
library(fields)#
library(fpc)#
#
source('~/Dropbox/Tarleton/data_mining/generic_functions/dataset_ops.R')#
wdbc <- read.csv('~/Dropbox/Tarleton/data_mining/dfiles/wdbc.data',#
                 header=F,sep=',')#
wdbc <- wdbc[,-1]#
nr <- nrow(wdbc) #
nc <- ncol(wdbc) #
#
# 1 Test whether the k-means clusters for the wdbc data set are #
#   statisticaly independent of Diagnosis using a chi-square test with #
#   a simulated p-value.#
#
wdbc_kmeans <- kmeans_reps(wdbc[2:nc], 2, 1000)#
predicted <- rep('',nr)#
predicted[1 * (wdbc_kmeans$cluster == 2) == 1] <- 'B'#
predicted[1 * (wdbc_kmeans$cluster == 1) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)#
#
chisq.test(wdbc_tab, simulate.p.value = T)#
chisq.test(wdbc_tab, simulate.p.value = F)#
#
# 2 In this problem, you will apply the DBSCAN clustering method on the #
#   wdbc data. #
#
#  a. Create a plot of sorted k-dist values, where k = 5, and determine #
#     the optimal vlaue of Eps. #
#
k = 5#
z <- standardize(wdbc, 2:nc)#
dmat <- rdist(z[,2:nc])#
#
sort_dmat <- apply(dmat, 2, sort)#
kdist <- sort_dmat[k,]#
plot(sort(kdist), type='l', #
     xlab = 'Points Sorted by k-dist', #
     ylab = 'k-dist')#
lines(1:length(kdist), rep(3.8, length(kdist)), col='blue')#
#
myEps = 4.35#
#
#  b. Perform DBSCAN using this value of Eps and k = 5#
#
wdbc_dbscan <- dbscan(z[,2:nc], eps = myEps, MinPts = k)#
plot(z[,2], z[,8], col = (wdbc_dbscan$cluster + 1))#
#
predicted <- rep('',nr)#
predicted[1 * (wdbc_dbscan$cluster == 1) == 1] <- 'B'#
predicted[1 * (wdbc_dbscan$cluster == 0) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)#
#
#  c. How many clusters were identified? #
#
#     2#
#
#  d. What percentage of the points in the data were classified as noise? #
#  e. Test whether the dbscan clusters are statistically independent of #
#     Diagnosis using a chi-square test with a simulated p-value. #
#
chisq.test(wdbc_tab, simulate.p.value=T)
#Data Mining hw 19#
library(stats)#
library(cluster)#
library(fields)#
library(fpc)#
#
source('~/Dropbox/Tarleton/data_mining/generic_functions/dataset_ops.R')#
wdbc <- read.csv('~/Dropbox/Tarleton/data_mining/dfiles/wdbc.data',#
                 header=F,sep=',')#
wdbc <- wdbc[,-1]#
nr <- nrow(wdbc) #
nc <- ncol(wdbc) #
#
# 1 Test whether the k-means clusters for the wdbc data set are #
#   statisticaly independent of Diagnosis using a chi-square test with #
#   a simulated p-value.#
#
wdbc_kmeans <- kmeans_reps(wdbc[2:nc], 2, 1000)#
predicted <- rep('',nr)#
predicted[1 * (wdbc_kmeans$cluster == 2) == 1] <- 'B'#
predicted[1 * (wdbc_kmeans$cluster == 1) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)#
#
chisq.test(wdbc_tab, simulate.p.value = T)#
chisq.test(wdbc_tab, simulate.p.value = F)#
#
# 2 In this problem, you will apply the DBSCAN clustering method on the #
#   wdbc data. #
#
#  a. Create a plot of sorted k-dist values, where k = 5, and determine #
#     the optimal vlaue of Eps. #
#
k = 5#
z <- standardize(wdbc, 2:nc)#
dmat <- rdist(z[,2:nc])#
#
sort_dmat <- apply(dmat, 2, sort)#
kdist <- sort_dmat[k,]#
plot(sort(kdist), type='l', #
     xlab = 'Points Sorted by k-dist', #
     ylab = 'k-dist')#
lines(1:length(kdist), rep(3.78, length(kdist)), col='blue')#
#
myEps = 4.35#
#
#  b. Perform DBSCAN using this value of Eps and k = 5#
#
wdbc_dbscan <- dbscan(z[,2:nc], eps = myEps, MinPts = k)#
plot(z[,2], z[,8], col = (wdbc_dbscan$cluster + 1))#
#
predicted <- rep('',nr)#
predicted[1 * (wdbc_dbscan$cluster == 1) == 1] <- 'B'#
predicted[1 * (wdbc_dbscan$cluster == 0) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)#
#
#  c. How many clusters were identified? #
#
#     2#
#
#  d. What percentage of the points in the data were classified as noise? #
#  e. Test whether the dbscan clusters are statistically independent of #
#     Diagnosis using a chi-square test with a simulated p-value. #
#
chisq.test(wdbc_tab, simulate.p.value=T)
#Data Mining hw 19#
library(stats)#
library(cluster)#
library(fields)#
library(fpc)#
#
source('~/Dropbox/Tarleton/data_mining/generic_functions/dataset_ops.R')#
wdbc <- read.csv('~/Dropbox/Tarleton/data_mining/dfiles/wdbc.data',#
                 header=F,sep=',')#
wdbc <- wdbc[,-1]#
nr <- nrow(wdbc) #
nc <- ncol(wdbc) #
#
# 1 Test whether the k-means clusters for the wdbc data set are #
#   statisticaly independent of Diagnosis using a chi-square test with #
#   a simulated p-value.#
#
wdbc_kmeans <- kmeans_reps(wdbc[2:nc], 2, 1000)#
predicted <- rep('',nr)#
predicted[1 * (wdbc_kmeans$cluster == 2) == 1] <- 'B'#
predicted[1 * (wdbc_kmeans$cluster == 1) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)#
#
chisq.test(wdbc_tab, simulate.p.value = T)#
chisq.test(wdbc_tab, simulate.p.value = F)#
#
# 2 In this problem, you will apply the DBSCAN clustering method on the #
#   wdbc data. #
#
#  a. Create a plot of sorted k-dist values, where k = 5, and determine #
#     the optimal vlaue of Eps. #
#
k = 5#
z <- standardize(wdbc, 2:nc)#
dmat <- rdist(z[,2:nc])#
#
sort_dmat <- apply(dmat, 2, sort)#
kdist <- sort_dmat[k,]#
plot(sort(kdist), type='l', #
     xlab = 'Points Sorted by k-dist', #
     ylab = 'k-dist')#
lines(1:length(kdist), rep(3.75, length(kdist)), col='blue')#
#
myEps = 4.35#
#
#  b. Perform DBSCAN using this value of Eps and k = 5#
#
wdbc_dbscan <- dbscan(z[,2:nc], eps = myEps, MinPts = k)#
plot(z[,2], z[,8], col = (wdbc_dbscan$cluster + 1))#
#
predicted <- rep('',nr)#
predicted[1 * (wdbc_dbscan$cluster == 1) == 1] <- 'B'#
predicted[1 * (wdbc_dbscan$cluster == 0) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)#
#
#  c. How many clusters were identified? #
#
#     2#
#
#  d. What percentage of the points in the data were classified as noise? #
#  e. Test whether the dbscan clusters are statistically independent of #
#     Diagnosis using a chi-square test with a simulated p-value. #
#
chisq.test(wdbc_tab, simulate.p.value=T)
#Data Mining hw 19#
library(stats)#
library(cluster)#
library(fields)#
library(fpc)#
library(dbscan)#
#
source('~/Dropbox/Tarleton/data_mining/generic_functions/dataset_ops.R')#
source('~/Dropbox/Tarleton/data_mining/generic_functions/cluster_funs.R')#
wdbc <- read.csv('~/Dropbox/Tarleton/data_mining/dfiles/wdbc.data',#
                 header=F,sep=',')#
wdbc <- wdbc[,-1]#
nr <- nrow(wdbc) #
nc <- ncol(wdbc) #
#
# 1 Test whether the k-means clusters for the wdbc data set are #
#   statisticaly independent of Diagnosis using a chi-square test with #
#   a simulated p-value.#
#
wdbc_kmeans <- kmeans_reps(wdbc[2:nc], 2, 1000)#
predicted <- rep('',nr)#
predicted[1 * (wdbc_kmeans$cluster == 2) == 1] <- 'B'#
predicted[1 * (wdbc_kmeans$cluster == 1) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)#
#
chisq.test(wdbc_tab, simulate.p.value = T)#
chisq.test(wdbc_tab, simulate.p.value = F)#
#
# 2 In this problem, you will apply the DBSCAN clustering method on the #
#   wdbc data. #
#
#  a. Create a plot of sorted k-dist values, where k = 5, and determine #
#     the optimal vlaue of Eps. #
#
k = 5#
z <- standardize(wdbc, 2:nc)#
dmat <- rdist(z[,2:nc])#
#
sort_dmat <- apply(dmat, 2, sort)#
kdist <- sort_dmat[k,]#
plot(sort(kdist), type='l', #
     xlab = 'Points Sorted by k-dist', #
     ylab = 'k-dist')#
lines(1:length(kdist), rep(3.75, length(kdist)), col='blue')#
#lines(1:length(kdist), rep(4.35, length(kdist)), col='blue')#
#
myEps = 4.35#
#myEps = 3.75#
#  b. Perform DBSCAN using this value of Eps and k = 5#
#
wdbc_dbscan <- dbscan(z[,2:nc], eps = myEps, MinPts = k)#
plot(z[,2], z[,8], col = (wdbc_dbscan$cluster + 1))
k
ncol(z)
nc
z
head(z)
wdbc_dbscan <- dbscan(z[,-1], eps = myEps, MinPts = k)
wdbc_dbscan <- dbscan(z, eps = myEps, MinPts = k)
library(stats)#
library(cluster)
library(fpc)
source('~/Dropbox/Tarleton/data_mining/generic_functions/dataset_ops.R')#
source('~/Dropbox/Tarleton/data_mining/generic_functions/cluster_funs.R')#
wdbc <- read.csv('~/Dropbox/Tarleton/data_mining/dfiles/wdbc.data',#
                 header=F,sep=',')#
wdbc <- wdbc[,-1]#
nr <- nrow(wdbc) #
nc <- ncol(wdbc)
k = 5#
z <- standardize(wdbc, 2:nc)#
dmat <- rdist(z[,2:nc])#
#
sort_dmat <- apply(dmat, 2, sort)#
kdist <- sort_dmat[k,]#
plot(sort(kdist), type='l', #
     xlab = 'Points Sorted by k-dist', #
     ylab = 'k-dist')#
lines(1:length(kdist), rep(3.75, length(kdist)), col='blue')#
#lines(1:length(kdist), rep(4.35, length(kdist)), col='blue')#
#
myEps = 4.35#
#myEps = 3.75#
#  b. Perform DBSCAN using this value of Eps and k = 5#
#
wdbc_dbscan <- dbscan(z[,-1], eps = myEps, MinPts = k)#
plot(z[,2], z[,8], col = (wdbc_dbscan$cluster + 1))
#Data Mining hw 19#
library(stats)#
library(cluster)#
library(fields)#
library(fpc)#
library(dbscan)#
#
source('~/Dropbox/Tarleton/data_mining/generic_functions/dataset_ops.R')#
source('~/Dropbox/Tarleton/data_mining/generic_functions/cluster_funs.R')#
wdbc <- read.csv('~/Dropbox/Tarleton/data_mining/dfiles/wdbc.data',#
                 header=F,sep=',')#
wdbc <- wdbc[,-1]#
nr <- nrow(wdbc) #
nc <- ncol(wdbc) #
#
# 1 Test whether the k-means clusters for the wdbc data set are #
#   statisticaly independent of Diagnosis using a chi-square test with #
#   a simulated p-value.#
#
wdbc_kmeans <- kmeans_reps(wdbc[2:nc], 2, 1000)#
predicted <- rep('',nr)#
predicted[1 * (wdbc_kmeans$cluster == 2) == 1] <- 'B'#
predicted[1 * (wdbc_kmeans$cluster == 1) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)#
#
chisq.test(wdbc_tab, simulate.p.value = T)#
chisq.test(wdbc_tab, simulate.p.value = F)#
#
# 2 In this problem, you will apply the DBSCAN clustering method on the #
#   wdbc data. #
#
#  a. Create a plot of sorted k-dist values, where k = 5, and determine #
#     the optimal vlaue of Eps. #
#
k = 5#
z <- standardize(wdbc, 2:nc)#
dmat <- rdist(z[,2:nc])#
#
sort_dmat <- apply(dmat, 2, sort)#
kdist <- sort_dmat[k,]#
plot(sort(kdist), type='l', #
     xlab = 'Points Sorted by k-dist', #
     ylab = 'k-dist')#
lines(1:length(kdist), rep(3.75, length(kdist)), col='blue')#
#lines(1:length(kdist), rep(4.35, length(kdist)), col='blue')
myEps = 4.35
wdbc_dbscan <- dbscan(z[,-1], eps = myEps, MinPts = k)
wdbc_dbscan <- dbscan(z[,-1], eps = myEps)#, MinPts = k)
plot(z[,2], z[,8], col = (wdbc_dbscan$cluster + 1))
predicted <- rep('',nr)#
predicted[1 * (wdbc_dbscan$cluster == 1) == 1] <- 'B'#
predicted[1 * (wdbc_dbscan$cluster == 0) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)
names(wdbc_dbscan)
wdbc_dbscan$cluster
wdbc_dbscan <- dbscan(z[,-1], eps = myEps, minPts = k)
predicted <- rep('',nr)#
predicted[1 * (wdbc_dbscan$cluster == 1) == 1] <- 'B'#
predicted[1 * (wdbc_dbscan$cluster == 0) == 1] <- 'M'#
wdbc_tab <- table(wdbc$V2, predicted)
wdbc_tab
wdbc_dbscan$cluster
