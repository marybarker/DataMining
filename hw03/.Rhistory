entropy = entropy_eval(c(class_n1, class_n2))
entropy
class_n1 = sum(class1)/N
class_n2 = sum(class2)/N
source("~/Dropbox/Tarleton/data_mining/hw02/measures.R")
entropy = entropy_eval(c(class_n1, class_n2))
entropy
people <- read.table("~/Dropbox/Tarleton/data_mining/hw02/Hw2.csv", header=TRUE, sep=",")
gender = people$Gender
cartype = people$CarType
shirtsize = people$ShirtSize
class = people$Class
N = length(class)
#typing 'N' into console now returns 1000
source("~/Dropbox/Tarleton/data_mining/hw02/measures.R")
#################################################
#             Test class entropy
#################################################
table(class)
#result of calling table(class) is the following:
# C0   C1
#480  520
class1 = (class == 'C0')*1
class2 = (class == 'C1')*1
class_n1 = sum(class1)/N
class_n2 = sum(class2)/N
entropy = entropy_eval(c(class_n1, class_n2))
#typing 'entropy' into console results in 0.9988455
#################################################
#         Test gender weighted entropy
#################################################
table(gender)
#result of calling table(gender) is the following:
# C0   C1
#480  520
gender1 = (gender == 'C0')*1
gender2 = (gender == 'C1')*1
gender_n1 = sum(gender1)/N
gender_n2 = sum(gender2)/N
entropy = entropy_eval(c(gender_n1, gender_n2))
unique(class(gender1 > 0))
#weighted_entropy = (g1 + g2) * entropy / N
#typing 'weighted_entropy' into console results in
people <- read.table("~/Dropbox/Tarleton/data_mining/hw02/Hw2.csv", header=TRUE, sep=",")
gender = people$Gender
cartype = people$CarType
shirtsize = people$ShirtSize
class = people$Class
N = length(class)
#typing 'N' into console now returns 1000
source("~/Dropbox/Tarleton/data_mining/hw02/measures.R")
#################################################
#             Test class entropy
#################################################
table(class)
#result of calling table(class) is the following:
# C0   C1
#480  520
class1 = (class == 'C0')*1
class2 = (class == 'C1')*1
class_n1 = sum(class1)/N
class_n2 = sum(class2)/N
entropy = entropy_eval(c(class_n1, class_n2))
#typing 'entropy' into console results in 0.9988455
#################################################
#         Test gender weighted entropy
#################################################
table(gender)
#result of calling table(gender) is the following:
# C0   C1
#480  520
gender1 = (gender == 'C0')*1
gender2 = (gender == 'C1')*1
gender_n1 = sum(gender1)/N
gender_n2 = sum(gender2)/N
entropy = entropy_eval(c(gender_n1, gender_n2))
unique(class[gender1 > 0])
#weighted_entropy = (g1 + g2) * entropy / N
#typing 'weighted_entropy' into console results in
unique(class[gender1])
num <- unique(class[gender1])
num
num
length(num)
table(gender)
aggregate(Class, Gender, people, function(x), length(unique(x)))
aggregate(Class ~ Gender, people, function(x), length(unique(x)))
aggregate(Class ~ Gender, people, function(x) length(unique(x)))
aggregate(Class ~ Gender, people, function(x) length(unique(x)))
aggregate(ShirtSize ~ Gender, people, function(x) length(unique(x)))
aggregate(CarType ~ Gender, people, function(x) length(unique(x)))
gender1 = (gender == 'M')*1
gender2 = (gender == 'F')*1
table(class[gender1 > 0])
c = table(gender)
c
c[1]
c[2]
c[2, 1]
c[2, 2]
length(c[1])
c[1]
sum(gender1)
genderm = (gender == 'M')*1
genderf = (gender == 'F')*1
gender_n1 = sum(genderm)/N
gender_n2 = sum(genderf)/N
class11 = ((genderm > 0) & (class1 > 0)) / sum(genderm)
class12 = ((genderm > 0) & (class2 > 0)) / sum(genderm)
class21 = ((genderf > 0) & (class1 > 0)) / sum(genderf)
class22 = ((genderf > 0) & (class2 > 0)) / sum(genderf)
e1 = entropy_eval(c(class11, class12))
e2 = entropy_eval(c(class21, class22))
weighted_entropy = (gender_n1 * e1 + gender_n2 * e2) / N
weighted_entropy
weighted_entropy = (gender_n1 * e1 + gender_n2 * e2)
weighted_entropy
class11
class12
class11 = ((genderm > 0) & (class1 > 0)) * 1# / sum(genderm)
class12 = ((genderm > 0) & (class2 > 0)) * 1# / sum(genderm)
class11
class12
sum(class11)
sum(class12)
genderm = (gender == 'M')*1
genderf = (gender == 'F')*1
gender_n1 = sum(genderm)/N
gender_n2 = sum(genderf)/N
class11 = sum( ((genderm > 0) & (class1 > 0)) * 1) / sum(genderm)
class12 = sum( ((genderm > 0) & (class2 > 0)) * 1) / sum(genderm)
class21 = sum( ((genderf > 0) & (class1 > 0)) * 1) / sum(genderf)
class22 = sum( ((genderf > 0) & (class2 > 0)) * 1) / sum(genderf)
e1 = entropy_eval(c(class11, class12))
e2 = entropy_eval(c(class21, class22))
weighted_entropy = (gender_n1 * e1 + gender_n2 * e2)
weighted_entropy
people <- read.table("~/Dropbox/Tarleton/data_mining/hw02/Hw2.csv", header=TRUE, sep=",")
gender = people$Gender
cartype = people$CarType
shirtsize = people$ShirtSize
class = people$Class
N = length(class)
#typing 'N' into console now returns 1000
source("~/Dropbox/Tarleton/data_mining/hw02/measures.R")
#################################################
#             Test class entropy
#################################################
table(class)
#result of calling table(class) is the following:
# C0   C1
#480  520
class1 = (class == 'C0')*1
class2 = (class == 'C1')*1
class_n1 = sum(class1)/N
class_n2 = sum(class2)/N
entropy = entropy_eval(c(class_n1, class_n2))
#typing 'entropy' into console results in 0.9988455
#################################################
#         Test gender weighted entropy
#################################################
genderm = (gender == 'M')*1
genderf = (gender == 'F')*1
gender_n1 = sum(genderm)/N
gender_n2 = sum(genderf)/N
class11 = sum( ((genderm > 0) & (class1 > 0)) * 1) / sum(genderm)
class12 = sum( ((genderm > 0) & (class2 > 0)) * 1) / sum(genderm)
class21 = sum( ((genderf > 0) & (class1 > 0)) * 1) / sum(genderf)
class22 = sum( ((genderf > 0) & (class2 > 0)) * 1) / sum(genderf)
e1 = entropy_eval(c(class11, class12))
e2 = entropy_eval(c(class21, class22))
weighted_entropy = (gender_n1 * e1 + gender_n2 * e2)
weighted_entropy
#weighted_entropy has value 0.9745739
class11
class12
class21
class22
class11 = sum( ((genderm > 0) & (class1 > 0)) * 1)# / sum(genderm)
class12 = sum( ((genderm > 0) & (class2 > 0)) * 1)# / sum(genderm)
class21 = sum( ((genderf > 0) & (class1 > 0)) * 1)# / sum(genderf)
class22 = sum( ((genderf > 0) & (class2 > 0)) * 1)# / sum(genderf)
class11
class12
class21
class22
table(cartype)
entropy = entropy_eval( c((classv$C0) / N, (classv$C1) / N) )
entropy
classv <- table(class)
entropy = entropy_eval( c((classv$C0) / N, (classv$C1) / N) )
entropy
classv <- table(class)
classv
classv$C0
classv$C0[1]
classv[1]
classv[1]$C0
cc <- table(class)
cc
cc <- table(class)
cc$C0
cc <- read.table(class)
cc$C0
fam = (cartype == 'Family')*1
lux = (cartype == 'Luxury')*1
spt = (cartype == 'Sports')*1
car_n1 = sum(fam) / N
car_n2 = sum(lux) / N
car_n3 = sum(spt) / N
class11 = sum( (fam > 0) & (class1 > 0) )
class12 = sum( (fam > 0) & (class2 > 0) )
class21 = sum( (lux > 0) & (class1 > 0) )
class22 = sum( (lux > 0) & (class2 > 0) )
class31 = sum( (spt > 0) & (class1 > 0) )
class32 = sum( (spt > 0) & (class2 > 0) )
class11 = class11 / sum(fam)
class12 = class12 / sum(fam)
class21 = class21 / sum(lux)
class22 = class22 / sum(lux)
class31 = class31 / sum(spt)
class32 = class32 / sum(spt)
e1 = entropy_eval(c(class11, class12))
e2 = entropy_eval(c(class21, class22))
e3 = entropy_eval(c(class31, class32))
weighted_entropy = car_n1 * e1 + car_n2 * e2 + car_n3 * e3
weighted_entropy
class11 = sum( (fam > 0) & (class1 > 0) )
class12 = sum( (fam > 0) & (class2 > 0) )
class21 = sum( (lux > 0) & (class1 > 0) )
class22 = sum( (lux > 0) & (class2 > 0) )
class31 = sum( (spt > 0) & (class1 > 0) )
class32 = sum( (spt > 0) & (class2 > 0) )
class11
class12
class21
class22
class31
class32
sum(fam)
sum(lux)
sum(spt)
people <- read.table("~/Dropbox/Tarleton/data_mining/hw02/Hw2.csv", header=TRUE, sep=",")
gender = people$Gender
cartype = people$CarType
shirtsize = people$ShirtSize
class = people$Class
N = length(class)
#typing 'N' into console now returns 1000
source("~/Dropbox/Tarleton/data_mining/hw02/measures.R")
#################################################
#             Test class entropy
#################################################
table(class)
#result of calling table(class) is the following:
# C0   C1
#480  520
class1 = (class == 'C0')*1
class2 = (class == 'C1')*1
class_n1 = sum(class1)/N
class_n2 = sum(class2)/N
entropy = entropy_eval(c(class_n1, class_n2))
#typing 'entropy' into console results in 0.9988455
#################################################
#         Test gender weighted entropy
#################################################
genderm = (gender == 'M')*1
genderf = (gender == 'F')*1
gender_n1 = sum(genderm)/N
gender_n2 = sum(genderf)/N
class11 = sum( ((genderm > 0) & (class1 > 0)) * 1)
class12 = sum( ((genderm > 0) & (class2 > 0)) * 1)
class21 = sum( ((genderf > 0) & (class1 > 0)) * 1)
class22 = sum( ((genderf > 0) & (class2 > 0)) * 1)
class11 = class11 / sum(genderm)
class12 = class12 / sum(genderm)
class21 = class21 / sum(genderf)
class22 = class22 / sum(genderf)
e1 = entropy_eval(c(class11, class12))
e2 = entropy_eval(c(class21, class22))
weighted_entropy = (gender_n1 * e1 + gender_n2 * e2)
#weighted_entropy has value 0.9745739
#################################################
#         Test cartype weighted entropy
#################################################
fam = (cartype == 'Family')*1
lux = (cartype == 'Luxury')*1
spt = (cartype == 'Sports')*1
car_n1 = sum(fam) / N
car_n2 = sum(lux) / N
car_n3 = sum(spt) / N
class11 = sum( (fam > 0) & (class1 > 0) )
class12 = sum( (fam > 0) & (class2 > 0) )
class21 = sum( (lux > 0) & (class1 > 0) )
class22 = sum( (lux > 0) & (class2 > 0) )
class31 = sum( (spt > 0) & (class1 > 0) )
class32 = sum( (spt > 0) & (class2 > 0) )
class11 = class11 / sum(fam)
class12 = class12 / sum(fam)
class21 = class21 / sum(lux)
class22 = class22 / sum(lux)
class31 = class31 / sum(spt)
class32 = class32 / sum(spt)
e1 = entropy_eval(c(class11, class12))
e2 = entropy_eval(c(class21, class22))
e3 = entropy_eval(c(class31, class32))
weighted_entropy = car_n1 * e1 + car_n2 * e2 + car_n3 * e3
weighted_entropy
table(shirtsize)
people <- read.table("~/Dropbox/Tarleton/data_mining/hw02/Hw2.csv", header=TRUE, sep=",")
gender = people$Gender
cartype = people$CarType
shirtsize = people$ShirtSize
class = people$Class
N = length(class)
#typing 'N' into console now returns 1000
source("~/Dropbox/Tarleton/data_mining/hw02/measures.R")
#################################################
#             Test class entropy
#################################################
table(class)
#result of calling table(class) is the following:
# C0   C1
#480  520
class1 = (class == 'C0')*1
class2 = (class == 'C1')*1
class_n1 = sum(class1)/N
class_n2 = sum(class2)/N
entropy = entropy_eval(c(class_n1, class_n2))
#typing 'entropy' into console results in 0.9988455
#################################################
#         Test gender weighted entropy
#################################################
genderm = (gender == 'M')*1
genderf = (gender == 'F')*1
gender_n1 = sum(genderm)/N
gender_n2 = sum(genderf)/N
class11 = sum( ((genderm > 0) & (class1 > 0)) * 1)
class12 = sum( ((genderm > 0) & (class2 > 0)) * 1)
class21 = sum( ((genderf > 0) & (class1 > 0)) * 1)
class22 = sum( ((genderf > 0) & (class2 > 0)) * 1)
class11 = class11 / sum(genderm)
class12 = class12 / sum(genderm)
class21 = class21 / sum(genderf)
class22 = class22 / sum(genderf)
e1 = entropy_eval(c(class11, class12))
e2 = entropy_eval(c(class21, class22))
weighted_entropy = (gender_n1 * e1 + gender_n2 * e2)
#weighted_entropy has value 0.9745739
#################################################
#         Test cartype weighted entropy
#################################################
fam = (cartype == 'Family')*1
lux = (cartype == 'Luxury')*1
spt = (cartype == 'Sports')*1
car_n1 = sum(fam) / N
car_n2 = sum(lux) / N
car_n3 = sum(spt) / N
class11 = sum( (fam > 0) & (class1 > 0) )
class12 = sum( (fam > 0) & (class2 > 0) )
class21 = sum( (lux > 0) & (class1 > 0) )
class22 = sum( (lux > 0) & (class2 > 0) )
class31 = sum( (spt > 0) & (class1 > 0) )
class32 = sum( (spt > 0) & (class2 > 0) )
class11 = class11 / sum(fam)
class12 = class12 / sum(fam)
class21 = class21 / sum(lux)
class22 = class22 / sum(lux)
class31 = class31 / sum(spt)
class32 = class32 / sum(spt)
e1 = entropy_eval(c(class11, class12))
e2 = entropy_eval(c(class21, class22))
e3 = entropy_eval(c(class31, class32))
weighted_entropy = car_n1 * e1 + car_n2 * e2 + car_n3 * e3
weighted_entropy
#################################################
#         Test shirtsize weighted entropy
#################################################
table(shirtsize)
x = (shirtsize == 'ExtraLarge')*1 # 201
l = (shirtsize == 'Large')*1      # 200
m = (shirtsize == 'Medium')*1     # 359
s = (shirtsize == 'Small')*1      # 240
shirt_n1 = sum(x) / N
shirt_n2 = sum(l) / N
shirt_n3 = sum(m) / N
shirt_n4 = sum(s) / N
class11 = sum( (x > 0) & (class1 > 0) )
class12 = sum( (x > 0) & (class2 > 0) )
class21 = sum( (l > 0) & (class1 > 0) )
class22 = sum( (l > 0) & (class2 > 0) )
class31 = sum( (m > 0) & (class1 > 0) )
class32 = sum( (m > 0) & (class2 > 0) )
class41 = sum( (s > 0) & (class1 > 0) )
class42 = sum( (s > 0) & (class2 > 0) )
class11 = class11 / sum(x)
class12 = class12 / sum(x)
class21 = class21 / sum(l)
class22 = class22 / sum(l)
class31 = class31 / sum(m)
class32 = class32 / sum(m)
class41 = class41 / sum(s)
class42 = class42 / sum(s)
e1 = entropy_eval(c(class11, class12))
e2 = entropy_eval(c(class21, class22))
e3 = entropy_eval(c(class31, class32))
e4 = entropy_eval(c(class41, class42))
weighted_entropy = shirt_n1 * e1 + shirt_n2 * e2 + shirt_n3 * e3 + shirt_n4 * e4
weighted_entropy
class11 = sum( (x > 0) & (class1 > 0) )
class12 = sum( (x > 0) & (class2 > 0) )
class21 = sum( (l > 0) & (class1 > 0) )
class22 = sum( (l > 0) & (class2 > 0) )
class31 = sum( (m > 0) & (class1 > 0) )
class32 = sum( (m > 0) & (class2 > 0) )
class41 = sum( (s > 0) & (class1 > 0) )
class42 = sum( (s > 0) & (class2 > 0) )
class11
class12
class21
class22
class31
class32
class41
class42
iris
head(iris)
attach(iris)
help(iris)
dim(iris)
plot(iris)
iris$Petal.Length
attach(iris) # alias Petal.Length <- iris$Petal.Length, &c.
plot(Petal.Length,Petal.Width)
plot(Petal.Length,Petal.Width,col=Species)
plot(Petal.Length,Petal.Width,col=c('blue','red','purple')[Species])
colorvector=c(rep("blue",50), rep("green", 50), rep("red", 50) )
plot(Petal.Length, Petal.Width,col=colorvector)
x = c(8, -3, 4)
x[1]
x[2]
x[3]
x[Species]
install.packages("rpart")
library(rpart)
library(rattle)
library(rpart)
as.numeric(Species)
install.packages("rattle")
library(rattle)
install.packages("RGk2")
#Exploring the iris data set.
head(iris)
attach(iris)
plot(Petal.Length,Petal.Width)
plot(Petal.Length,Petal.Width,col=Species)
plot(Petal.Length,Petal.Width,col=c('blue','red','purple')[Species])
#Decision trees with the rpart package.
library(rpart)
library(rattle)
iristree=rpart(Species~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,  data=iris)
iristree=rpart(Species~.,data=iris)
library(RGtk2)
install.packages("RGtk2",depen=T,type="source")
library(RGtk2)
Install GTK+
library(RGtk2)
remove.packages("RGtk2")
help(RGtk2)
.libPaths()
head(iris)
attach(iris) # alias Petal.Length <- iris$Petal.Length, &c.
plot(Petal.Length,Petal.Width)
plot(Petal.Length,Petal.Width,col=Species)
colorvector=c(rep("blue",50), rep("green", 50), rep("red", 50) )
plot(Petal.Length, Petal.Width,col=colorvector)
plot(Petal.Length,Petal.Width,col=c('blue','red','purple')[Species])
x = c(8, -3, 4)
x[1]
x[2]
x[3]
x[Species] # this takes the unique elements of species as
as.numeric(Species)
install.packages("rpart")
library(rpart)
install.packages("rattle")
library(rattle)
require(RColorBrewer)
remove.packages("rattle")
install.packages("rattle", dep = T)
library(rattle)
#Exploring the iris data set.
head(iris)
attach(iris) # alias Petal.Length <- iris$Petal.Length, &c.
plot(Petal.Length,Petal.Width)
plot(Petal.Length,Petal.Width,col=Species)
colorvector=c(rep("blue",50), rep("green", 50), rep("red", 50) )
plot(Petal.Length, Petal.Width,col=colorvector)
plot(Petal.Length,Petal.Width,col=c('blue','red','purple')[Species])
#x is a vector
x = c(8, -3, 4)
x[1]
x[2]
x[3]
x[Species] # this takes the unique elements of species as
# integer values for indexing.
as.numeric(Species)
#Decision trees with the rpart package.
#install.packages("rpart")
library(rpart)
#install.packages("rattle")
library(rattle)
